import http from 'node:http';
import { URL } from 'node:url';

interface Note {
  id: string;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
}

// In-memory storage
const notes = new Map<string, Note>();

// Helper functions
function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substring(2);
}

function sendJSON(res: http.ServerResponse, status: number, data: any) {
  res.statusCode = status;
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.end(JSON.stringify(data));
}

function parseBody(req: http.IncomingMessage): Promise<any> {
  return new Promise((resolve, reject) => {
    const chunks: Buffer[] = [];
    req.on('data', chunk => chunks.push(chunk));
    req.on('end', () => {
      try {
        const body = Buffer.concat(chunks).toString();
        resolve(body ? JSON.parse(body) : {});
      } catch (err) {
        reject(err);
      }
    });
    req.on('error', reject);
  });
}

const server = http.createServer(async (req, res) => {
  const url = new URL(req.url || '/', `http://${req.headers.host}`);
  const path = url.pathname;
  const method = req.method || 'GET';

  // CORS preflight
  if (method === 'OPTIONS') {
    sendJSON(res, 204, null);
    return;
  }

  // Health check
  if (path === '/health' && method === 'GET') {
    sendJSON(res, 200, { ok: true, timestamp: new Date().toISOString() });
    return;
  }

  // OpenAPI spec
  if (path === '/openapi' && method === 'GET') {
    sendJSON(res, 200, {
      openapi: '3.0.0',
      info: {
        title: 'profile-test API',
        version: '1.0.0',
        description: 'Generated by AXIOM'
      },
      servers: [{ url: 'http://localhost:4000' }],
      paths: {
        '/health': {
          get: {
            summary: 'Health check',
            responses: {
              '200': {
                description: 'OK',
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        ok: { type: 'boolean' },
                        timestamp: { type: 'string', format: 'date-time' }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        '/notes': {
          get: {
            summary: 'List all notes',
            responses: {
              '200': {
                description: 'List of notes',
                content: {
                  'application/json': {
                    schema: {
                      type: 'object',
                      properties: {
                        notes: {
                          type: 'array',
                          items: { $ref: '#/components/schemas/Note' }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          post: {
            summary: 'Create new note',
            requestBody: {
              required: true,
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    required: ['title', 'content'],
                    properties: {
                      title: { type: 'string' },
                      content: { type: 'string' }
                    }
                  }
                }
              }
            },
            responses: {
              '201': {
                description: 'Note created',
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/Note' }
                  }
                }
              }
            }
          }
        },
        '/notes/{id}': {
          get: {
            summary: 'Get note by ID',
            parameters: [{
              name: 'id',
              in: 'path',
              required: true,
              schema: { type: 'string' }
            }],
            responses: {
              '200': {
                description: 'Note found',
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/Note' }
                  }
                }
              },
              '404': { description: 'Note not found' }
            }
          },
          put: {
            summary: 'Update note',
            parameters: [{
              name: 'id',
              in: 'path',
              required: true,
              schema: { type: 'string' }
            }],
            requestBody: {
              required: true,
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      title: { type: 'string' },
                      content: { type: 'string' }
                    }
                  }
                }
              }
            },
            responses: {
              '200': {
                description: 'Note updated',
                content: {
                  'application/json': {
                    schema: { $ref: '#/components/schemas/Note' }
                  }
                }
              },
              '404': { description: 'Note not found' }
            }
          },
          delete: {
            summary: 'Delete note',
            parameters: [{
              name: 'id',
              in: 'path',
              required: true,
              schema: { type: 'string' }
            }],
            responses: {
              '204': { description: 'Note deleted' },
              '404': { description: 'Note not found' }
            }
          }
        }
      },
      components: {
        schemas: {
          Note: {
            type: 'object',
            properties: {
              id: { type: 'string' },
              title: { type: 'string' },
              content: { type: 'string' },
              createdAt: { type: 'string', format: 'date-time' },
              updatedAt: { type: 'string', format: 'date-time' }
            }
          }
        }
      }
    });
    return;
  }

  // List notes
  if (path === '/notes' && method === 'GET') {
    sendJSON(res, 200, { notes: Array.from(notes.values()) });
    return;
  }

  // Create note
  if (path === '/notes' && method === 'POST') {
    try {
      const body = await parseBody(req);
      if (!body.title || !body.content) {
        sendJSON(res, 400, { error: 'Missing title or content' });
        return;
      }
      const note: Note = {
        id: generateId(),
        title: body.title,
        content: body.content,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      notes.set(note.id, note);
      sendJSON(res, 201, note);
    } catch (err) {
      sendJSON(res, 400, { error: 'Invalid JSON' });
    }
    return;
  }

  // Get note by ID
  const noteMatch = path.match(/^\/notes\/([^/]+)$/);
  if (noteMatch && method === 'GET') {
    const id = noteMatch[1];
    const note = notes.get(id);
    if (!note) {
      sendJSON(res, 404, { error: 'Note not found' });
      return;
    }
    sendJSON(res, 200, note);
    return;
  }

  // Update note
  if (noteMatch && method === 'PUT') {
    const id = noteMatch[1];
    const note = notes.get(id);
    if (!note) {
      sendJSON(res, 404, { error: 'Note not found' });
      return;
    }
    try {
      const body = await parseBody(req);
      if (body.title !== undefined) note.title = body.title;
      if (body.content !== undefined) note.content = body.content;
      note.updatedAt = new Date().toISOString();
      notes.set(id, note);
      sendJSON(res, 200, note);
    } catch (err) {
      sendJSON(res, 400, { error: 'Invalid JSON' });
    }
    return;
  }

  // Delete note
  if (noteMatch && method === 'DELETE') {
    const id = noteMatch[1];
    if (!notes.has(id)) {
      sendJSON(res, 404, { error: 'Note not found' });
      return;
    }
    notes.delete(id);
    sendJSON(res, 204, null);
    return;
  }

  // 404
  sendJSON(res, 404, { error: 'Not found' });
});

const PORT = 4000;
server.listen(PORT, () => {
  console.log(`[profile-test] API listening on http://localhost:${PORT}`);
  console.log(`[profile-test] OpenAPI spec: http://localhost:${PORT}/openapi`);
});
