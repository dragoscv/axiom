
import type { Emitter } from "@axiom/engine/dist/emitter.js";

const emitter: Emitter = {
  subtype: "web-app",
  async generate(ctx) {
    const appName = ctx.agent.name || "app";
    const hasPiiTest = ctx.agent.name === "test-with-pii";
    const isEdge = ctx.profile === "edge";
    const isBudget = ctx.profile === "budget";

    // README
    ctx.write("README.md", `# ${appName.toUpperCase()} Web Application

Generated by AXIOM web-app emitter.

## Getting Started

\`\`\`bash
# Install dependencies
pnpm install

# Development mode
pnpm dev

# Production build
pnpm build
pnpm start
\`\`\`

## Features
- Next.js-like routing
- Server-side rendering
- Notes CRUD interface
- Responsive layout
`);

    // Next.js config
    const nextConfig = isEdge 
      ? `export default {
  experimental: {
    runtime: 'edge'
  }
} as import('next').NextConfig;`
      : `export default {} as import('next').NextConfig;`;
    ctx.write("next.config.ts", nextConfig);

    // Root layout
    ctx.write("app/layout.tsx", `export const metadata = {
  title: '${appName} - AXIOM App',
  description: 'Generated by AXIOM'
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </head>
      <body style={{ margin: 0, fontFamily: 'system-ui, sans-serif' }}>
        <nav style={{ background: '#333', color: 'white', padding: '1rem' }}>
          <div style={{ maxWidth: '1200px', margin: '0 auto', display: 'flex', gap: '1rem' }}>
            <a href="/" style={{ color: 'white', textDecoration: 'none' }}>Home</a>
            <a href="/notes" style={{ color: 'white', textDecoration: 'none' }}>Notes</a>
          </div>
        </nav>
        <main style={{ maxWidth: '1200px', margin: '0 auto', padding: '2rem' }}>
          {children}
        </main>
      </body>
    </html>
  );
}
`);

    // Home page
    ctx.write("app/page.tsx", `export default function HomePage() {
  return (
    <div>
      <h1>${appName.toUpperCase()}</h1>
      <p>Welcome to your AXIOM-generated application.</p>
      <div style={{ marginTop: '2rem' }}>
        <a href="/notes" style={{ 
          background: '#0070f3', 
          color: 'white', 
          padding: '0.5rem 1rem', 
          borderRadius: '4px', 
          textDecoration: 'none',
          display: 'inline-block'
        }}>
          View Notes
        </a>
      </div>
    </div>
  );
}
`);

    // Notes list page
    ctx.write("app/notes/page.tsx", `'use client';
import { useState, useEffect } from 'react';

interface Note {
  id: string;
  title: string;
  content: string;
  createdAt: string;
}

export default function NotesPage() {
  const [notes, setNotes] = useState<Note[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch('http://localhost:4000/notes')
      .then(res => res.json())
      .then(data => {
        setNotes(data.notes || []);
        setLoading(false);
      })
      .catch(err => {
        console.error('Failed to load notes:', err);
        setLoading(false);
      });
  }, []);

  const handleDelete = async (id: string) => {
    try {
      await fetch(\`http://localhost:4000/notes/\${id}\`, { method: 'DELETE' });
      setNotes(notes.filter(n => n.id !== id));
    } catch (err) {
      console.error('Failed to delete note:', err);
    }
  };

  if (loading) return <div>Loading notes...</div>;

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>
        <h1>Notes</h1>
        <a href="/notes/new" style={{ 
          background: '#0070f3', 
          color: 'white', 
          padding: '0.5rem 1rem', 
          borderRadius: '4px', 
          textDecoration: 'none'
        }}>
          Create Note
        </a>
      </div>
      {notes.length === 0 ? (
        <p>No notes yet. Create your first note!</p>
      ) : (
        <div style={{ display: 'grid', gap: '1rem' }}>
          {notes.map(note => (
            <div key={note.id} style={{ 
              border: '1px solid #ddd', 
              borderRadius: '8px', 
              padding: '1rem'
            }}>
              <h3 style={{ margin: '0 0 0.5rem 0' }}>{note.title}</h3>
              <p style={{ color: '#666', margin: '0 0 1rem 0' }}>{note.content}</p>
              <div style={{ display: 'flex', gap: '0.5rem', fontSize: '0.875rem' }}>
                <a href={\`/notes/\${note.id}\`} style={{ color: '#0070f3' }}>View</a>
                <button onClick={() => handleDelete(note.id)} style={{ 
                  background: 'none', 
                  border: 'none', 
                  color: '#f00', 
                  cursor: 'pointer',
                  padding: 0
                }}>
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
`);

    // Create note page
    ctx.write("app/notes/new/page.tsx", `'use client';
import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function NewNotePage() {
  const router = useRouter();
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [saving, setSaving] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);
    try {
      const res = await fetch('http://localhost:4000/notes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, content })
      });
      if (res.ok) {
        router.push('/notes');
      }
    } catch (err) {
      console.error('Failed to create note:', err);
      setSaving(false);
    }
  };

  return (
    <div>
      <h1>Create New Note</h1>
      <form onSubmit={handleSubmit} style={{ maxWidth: '600px' }}>
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
            Title
          </label>
          <input
            type="text"
            value={title}
            onChange={e => setTitle(e.target.value)}
            required
            style={{ 
              width: '100%', 
              padding: '0.5rem', 
              fontSize: '1rem',
              border: '1px solid #ddd',
              borderRadius: '4px'
            }}
          />
        </div>
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
            Content
          </label>
          <textarea
            value={content}
            onChange={e => setContent(e.target.value)}
            required
            rows={6}
            style={{ 
              width: '100%', 
              padding: '0.5rem', 
              fontSize: '1rem',
              border: '1px solid #ddd',
              borderRadius: '4px',
              fontFamily: 'inherit'
            }}
          />
        </div>
        <div style={{ display: 'flex', gap: '0.5rem' }}>
          <button
            type="submit"
            disabled={saving}
            style={{ 
              background: '#0070f3', 
              color: 'white', 
              padding: '0.5rem 1rem', 
              borderRadius: '4px',
              border: 'none',
              cursor: saving ? 'not-allowed' : 'pointer',
              fontSize: '1rem'
            }}
          >
            {saving ? 'Saving...' : 'Create Note'}
          </button>
          <a href="/notes" style={{ 
            padding: '0.5rem 1rem', 
            borderRadius: '4px',
            border: '1px solid #ddd',
            textDecoration: 'none',
            color: '#333',
            display: 'inline-block'
          }}>
            Cancel
          </a>
        </div>
      </form>
    </div>
  );
}
`);

    // View note page
    ctx.write("app/notes/[id]/page.tsx", `'use client';
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';

interface Note {
  id: string;
  title: string;
  content: string;
  createdAt: string;
}

export default function NoteDetailPage() {
  const params = useParams();
  const router = useRouter();
  const [note, setNote] = useState<Note | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch(\`http://localhost:4000/notes/\${params.id}\`)
      .then(res => res.json())
      .then(data => {
        setNote(data);
        setLoading(false);
      })
      .catch(err => {
        console.error('Failed to load note:', err);
        setLoading(false);
      });
  }, [params.id]);

  const handleDelete = async () => {
    if (!confirm('Are you sure you want to delete this note?')) return;
    try {
      await fetch(\`http://localhost:4000/notes/\${params.id}\`, { method: 'DELETE' });
      router.push('/notes');
    } catch (err) {
      console.error('Failed to delete note:', err);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (!note) return <div>Note not found</div>;

  return (
    <div>
      <div style={{ marginBottom: '2rem' }}>
        <a href="/notes" style={{ color: '#0070f3', textDecoration: 'none' }}>‚Üê Back to Notes</a>
      </div>
      <article style={{ maxWidth: '800px' }}>
        <h1>{note.title}</h1>
        <p style={{ color: '#666', fontSize: '0.875rem' }}>
          Created: {new Date(note.createdAt).toLocaleDateString()}
        </p>
        <div style={{ 
          marginTop: '2rem', 
          padding: '1rem', 
          background: '#f9f9f9', 
          borderRadius: '8px',
          whiteSpace: 'pre-wrap'
        }}>
          {note.content}
        </div>
        <div style={{ marginTop: '2rem', display: 'flex', gap: '0.5rem' }}>
          <button onClick={handleDelete} style={{ 
            background: '#f00', 
            color: 'white', 
            padding: '0.5rem 1rem', 
            borderRadius: '4px',
            border: 'none',
            cursor: 'pointer'
          }}>
            Delete Note
          </button>
        </div>
      </article>
    </div>
  );
}
`);

    // PII test injection
    if (hasPiiTest) {
      ctx.write("config/secrets.json", JSON.stringify({
        adminEmail: "admin@company.com",
        supportPhone: "0712345678",
        apiToken: "secret_token_12345"
      }, null, 2));
    }

    // Package.json with appropriate dependencies based on profile
    const baseDeps: Record<string, string> = {
      next: "14.2.7",
      react: "18.3.1",
      "react-dom": "18.3.1"
    };

    const budgetDeps = isBudget ? baseDeps : {
      ...baseDeps,
      "@vercel/analytics": "^1.1.1"
    };

    ctx.write("package.json", JSON.stringify({
      name: `axiom-${appName}-web`,
      version: "0.1.0",
      private: true,
      type: "module",
      scripts: {
        dev: "next dev -p 3000",
        build: "next build",
        start: "next start -p 3000",
        lint: "next lint"
      },
      dependencies: budgetDeps
    }, null, 2));

    // TypeScript config
    ctx.write("tsconfig.json", JSON.stringify({
      compilerOptions: {
        target: "ES2020",
        lib: ["ES2020", "DOM", "DOM.Iterable"],
        jsx: "preserve",
        module: "ESNext",
        moduleResolution: "bundler",
        resolveJsonModule: true,
        isolatedModules: true,
        esModuleInterop: true,
        strict: true,
        skipLibCheck: true,
        noEmit: true,
        incremental: true,
        plugins: [{ name: "next" }],
        paths: { "@/*": ["./*"] }
      },
      include: ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
      exclude: ["node_modules"]
    }, null, 2));

    // .gitignore
    ctx.write(".gitignore", `node_modules
.next
out
.DS_Store
*.log
.env*.local
`);
  }
};

export default emitter;
